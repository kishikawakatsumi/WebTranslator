{"version":3,"file":"background.js","mappings":"mBAEO,MAAMA,EAAqB,CAChC,CACEC,KAAM,KACNC,KAAM,aAER,CACED,KAAM,KACNC,KAAM,wBAER,CACED,KAAM,KACNC,KAAM,SAER,CACED,KAAM,KACNC,KAAM,UAER,CACED,KAAM,KACNC,KAAM,SAER,CACED,KAAM,KACNC,KAAM,WAER,CACED,KAAM,KACNC,KAAM,YAER,CACED,KAAM,KACNC,KAAM,WAER,CACED,KAAM,KACNC,KAAM,UAER,CACED,KAAM,KACNC,KAAM,UAER,CACED,KAAM,KACNC,KAAM,SAER,CACED,KAAM,KACNC,KAAM,aAER,CACED,KAAM,KACNC,KAAM,cAER,CACED,KAAM,KACNC,KAAM,WAER,CACED,KAAM,KACNC,KAAM,YAER,CACED,KAAM,KACNC,KAAM,UAER,CACED,KAAM,KACNC,KAAM,WAER,CACED,KAAM,KACNC,KAAM,cAER,CACED,KAAM,KACNC,KAAM,aAER,CACED,KAAM,KACNC,KAAM,UAER,CACED,KAAM,KACNC,KAAM,cAER,CACED,KAAM,KACNC,KAAM,YAER,CACED,KAAM,KACNC,KAAM,WAER,CACED,KAAM,KACNC,KAAM,UAER,CACED,KAAM,KACNC,KAAM,aAER,CACED,KAAM,KACNC,KAAM,WAER,CACED,KAAM,KACNC,KAAM,WAER,CACED,KAAM,KACNC,KAAM,WAER,CACED,KAAM,KACNC,KAAM,cCjHH,MAAMC,EACX,GAAM,IAAMC,KAAKC,MAAM,IAAMD,KAAKE,UAElC,GACA,GAEAC,cAAe,CAEfC,kBAAkBC,GAChBC,MAAK,EAAkBD,CACzB,CAEAE,kBAAkBC,GAChBF,MAAK,EAAkBE,CACzB,CAEAC,gBAAgBC,GAA6B,IAAtBC,IAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAClCN,MAAK,IAEL,IAAIS,EAAI,EACR,IAAK,MAAMC,KAAQN,EACjB,IAAK,IAAIO,EAAI,EAAGA,EAAID,EAAKH,OAAQI,IACf,MAAZD,EAAKC,IACPF,IAKN,IAAIG,EAAYC,KAAKC,MACrBF,EAAYA,EAAaA,EAAYH,EAAKA,E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","sources":["webpack://webtranslator/./src/shared/supported_languages.js","webpack://webtranslator/./src/background/translator.js","webpack://webtranslator/./src/background/background.js"],"sourcesContent":["\"use strict\";\n\nexport const supportedLanguages = [\n  {\n    code: \"BG\",\n    name: \"Bulgarian\",\n  },\n  {\n    code: \"ZH\",\n    name: \"Chinese (simplified)\",\n  },\n  {\n    code: \"CS\",\n    name: \"Czech\",\n  },\n  {\n    code: \"DA\",\n    name: \"Danish\",\n  },\n  {\n    code: \"NL\",\n    name: \"Dutch\",\n  },\n  {\n    code: \"EN\",\n    name: \"English\",\n  },\n  {\n    code: \"ET\",\n    name: \"Estonian\",\n  },\n  {\n    code: \"FI\",\n    name: \"Finnish\",\n  },\n  {\n    code: \"FR\",\n    name: \"French\",\n  },\n  {\n    code: \"DE\",\n    name: \"German\",\n  },\n  {\n    code: \"EL\",\n    name: \"Greek\",\n  },\n  {\n    code: \"HU\",\n    name: \"Hungarian\",\n  },\n  {\n    code: \"ID\",\n    name: \"Indonesian\",\n  },\n  {\n    code: \"IT\",\n    name: \"Italian\",\n  },\n  {\n    code: \"JA\",\n    name: \"Japanese\",\n  },\n  {\n    code: \"KO\",\n    name: \"Korean\",\n  },\n  {\n    code: \"LV\",\n    name: \"Latvian\",\n  },\n  {\n    code: \"LT\",\n    name: \"Lithuanian\",\n  },\n  {\n    code: \"NB\",\n    name: \"Norwegian\",\n  },\n  {\n    code: \"PL\",\n    name: \"Polish\",\n  },\n  {\n    code: \"PT\",\n    name: \"Portuguese\",\n  },\n  {\n    code: \"RO\",\n    name: \"Romanian\",\n  },\n  {\n    code: \"RU\",\n    name: \"Russian\",\n  },\n  {\n    code: \"SK\",\n    name: \"Slovak\",\n  },\n  {\n    code: \"SL\",\n    name: \"Slovenian\",\n  },\n  {\n    code: \"ES\",\n    name: \"Spanish\",\n  },\n  {\n    code: \"SV\",\n    name: \"Swedish\",\n  },\n  {\n    code: \"TR\",\n    name: \"Turkish\",\n  },\n  {\n    code: \"UK\",\n    name: \"Ukrainian\",\n  },\n];\n","\"use strict\";\n\nimport { supportedLanguages } from \"../shared/supported_languages\";\n\nexport class Translator {\n  #id = 1e4 * Math.round(1e4 * Math.random());\n\n  #sourceLanguage;\n  #targetLanguage;\n\n  constructor() {}\n\n  setSourceLanguage(sourceLanguage) {\n    this.#sourceLanguage = sourceLanguage;\n  }\n\n  setTargetLanguage(targetLanguage) {\n    this.#targetLanguage = targetLanguage;\n  }\n\n  async translate(texts, isHtmlEnabled = true) {\n    this.#id++;\n\n    let n = 1;\n    for (const text of texts) {\n      for (let i = 0; i < text.length; i++) {\n        if (text[i] === \"i\") {\n          n++;\n        }\n      }\n    }\n\n    let timestamp = Date.now();\n    timestamp = timestamp - (timestamp % n) + n;\n\n    let body = JSON.stringify({\n      jsonrpc: \"2.0\",\n      method: \"LMT_handle_texts\",\n      params: {\n        texts: texts.map((text) => {\n          return {\n            text,\n          };\n        }),\n        html: isHtmlEnabled ? \"enabled\" : undefined,\n        splitting: isHtmlEnabled ? undefined : \"newlines\",\n        lang: {\n          target_lang: isValidLanguage(this.#targetLanguage)\n            ? this.#targetLanguage\n            : supportedLanguages[0].code,\n          source_lang_user_selected: this.#sourceLanguage || \"auto\",\n        },\n        timestamp,\n      },\n      id: this.#id,\n    });\n    body = body.replace(\n      `\"method\":\"`,\n      `${\n        (this.#id + 3) % 13 === 0 || (this.#id + 5) % 29 === 0\n          ? `\"method\" : \"`\n          : `\"method\": \"`\n      }`\n    );\n\n    const request = {\n      method: isHtmlEnabled ? \"translate\" : \"translateSelection\",\n      payload: {\n        headers: {\n          Accept: \"*/*\",\n          \"x-app-os-name\": \"iOS\",\n          \"Accept-Encoding\": \"gzip, deflate, br\",\n          \"Content-Type\": \"application/json\",\n          Referer: \"https://www.deepl.com/\",\n        },\n        method: \"POST\",\n        body: body,\n      },\n    };\n\n    return new Promise((resolve) => {\n      browser.runtime.sendNativeMessage(\n        \"application.id\",\n        request,\n        (response) => {\n          if (response && response.result) {\n            resolve(response.result);\n          } else {\n            resolve(undefined);\n          }\n        }\n      );\n    });\n  }\n}\n\nfunction isValidLanguage(language) {\n  return supportedLanguages.some((supportedLanguage) => {\n    return supportedLanguage.code === language;\n  });\n}\n","\"use strict\";\n\nimport { Translator } from \"./translator\";\n\nclass App {\n  #selectionText = undefined;\n\n  constructor() {\n    this.#init();\n  }\n\n  #init() {\n    this.#setupListeners();\n    this.#setupContextMenu();\n  }\n\n  #setupListeners() {\n    browser.runtime.onMessage.addListener((request, sender, sendResponse) => {\n      if (!request) {\n        return;\n      }\n      switch (request.method) {\n        case \"translate\": {\n          const texts = request.texts;\n          translate(texts, request.sourceLanguage, request.targetLanguage)\n            .then((result) => {\n              sendResponse({ result });\n            })\n            .catch((error) => {\n              sendResponse();\n            });\n          break;\n        }\n        case \"translateSelection\": {\n          const selectionText = this.#selectionText;\n          if (request.selectionText && request.selectionText.trim()) {\n            // From popup toolbar (Mobile only)\n            this.#translateSelection(request.selectionText);\n          } else if (selectionText && selectionText.trim()) {\n            // Language changed in popover window\n            this.#translateSelection(selectionText);\n          }\n\n          sendResponse();\n          break;\n        }\n        default: {\n          sendResponse();\n          break;\n        }\n      }\n\n      return true;\n    });\n\n    browser.commands.onCommand.addListener((command) => {\n      if (command === \"trigger-translation\") {\n        browser.storage.local.get([\"settingsReadingShortcut\"], (result) => {\n          const settingsReadingShortcut =\n            result.settingsReadingShortcut === undefined ||\n            result.settingsReadingShortcut;\n          if (settingsReadingShortcut) {\n            browser.tabs\n              .executeScript({\n                code: `window.getSelection().toString();`,\n              })\n              .then((selection) => {\n                if (selection) {\n                  const selectionText = selection.toString().trim();\n                  if (selectionText) {\n                    this.#translateSelection(selectionText);\n                  }\n                }\n              });\n          }\n        });\n      }\n    });\n  }\n\n  #setupContextMenu() {\n    if (browser.menus.create) {\n      browser.menus.create({\n        id: \"translateSelection\",\n        title: browser.i18n.getMessage(\"context_menus_translate_section\"),\n        contexts: [\"editable\", \"link\", \"page\", \"selection\"],\n      });\n\n      browser.menus.onClicked.addListener(async (info, tab) => {\n        switch (info.menuItemId) {\n          case \"translateSelection\":\n            const selectionText = info.selectionText;\n            if (selectionText && selectionText.trim()) {\n              this.#translateSelection(selectionText);\n            }\n        }\n      });\n    }\n  }\n\n  async #translateSelection(selectionText) {\n    this.#selectionText = selectionText;\n    const targetLanguage = await getTargetLanguage();\n\n    browser.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      browser.tabs.sendMessage(tabs[0].id, {\n        method: \"startTranslateSelection\",\n        selectionText,\n      });\n    });\n\n    const result = await translate(\n      [selectionText],\n      undefined,\n      targetLanguage,\n      false\n    );\n\n    browser.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      browser.tabs.sendMessage(tabs[0].id, {\n        method: \"finishTranslateSelection\",\n        result,\n        targetLanguage,\n      });\n    });\n    browser.runtime.sendMessage({\n      method: \"finishTranslateSelection\",\n    });\n  }\n}\n\nasync function translate(\n  texts,\n  sourceLanguage,\n  targetLanguage,\n  isHtmlEnabled = true\n) {\n  const translator = new Translator();\n  translator.setSourceLanguage(sourceLanguage);\n  translator.setTargetLanguage(targetLanguage);\n\n  const result = await translator.translate(texts, isHtmlEnabled);\n  return result;\n}\n\nasync function getTargetLanguage() {\n  return new Promise((resolve, reject) => {\n    browser.storage.local.get([\"selectedTargetLanguage\"], (result) => {\n      if (result && result.selectedTargetLanguage) {\n        resolve(result.selectedTargetLanguage);\n      } else {\n        const locale = browser.i18n\n          .getUILanguage()\n          .split(\"-\")\n          .shift()\n          .toUpperCase();\n        resolve(locale);\n      }\n    });\n  });\n}\n\nnew App();\n"],"names":["supportedLanguages","code","name","Translator","Math","round","random","constructor","setSourceLanguage","sourceLanguage","this","setTargetLanguage","targetLanguage","async","texts","isHtmlEnabled","arguments","length","undefined","n","text","i","timestamp","Date","now","body","JSON","stringify","jsonrpc","method","params","map","html","splitting","lang","target_lang","language","some","supportedLanguage","source_lang_user_selected","id","replace","request","payload","headers","Accept","Referer","Promise","resolve","browser","runtime","sendNativeMessage","response","result","translate","translator","onMessage","addListener","sender","sendResponse","then","catch","error","selectionText","trim","commands","onCommand","command","storage","local","get","settingsReadingShortcut","tabs","executeScript","selection","toString","menus","create","title","i18n","getMessage","contexts","onClicked","info","tab","menuItemId","reject","selectedTargetLanguage","locale","getUILanguage","split","shift","toUpperCase","getTargetLanguage","query","active","currentWindow","sendMessage"],"sourceRoot":""}