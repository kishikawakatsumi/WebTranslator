{"version":3,"file":"background.js","mappings":"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","sources":["webpack://webtranslator/./src/shared/utils.js","webpack://webtranslator/./src/background/translator.js","webpack://webtranslator/./src/background/background.js"],"sourcesContent":["\"use strict\";\n\nexport function runColorMode(fn) {\n  if (!window.matchMedia) {\n    return;\n  }\n\n  const query = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  fn(query.matches);\n  query.addEventListener(\"change\", (event) => fn(event.matches));\n}\n\nexport function loadColorScheme(file) {\n  const head = document.getElementsByTagName(\"head\").item(0);\n  const link = document.createElement(\"link\");\n  link.rel = \"stylesheet\";\n  link.type = \"text/css\";\n  link.href = file;\n  head.appendChild(link);\n}\n\nexport async function sendTabMessage(request) {\n  const tabs = await browser.tabs.query({\n    active: true,\n    currentWindow: true,\n  });\n  return await browser.tabs.sendMessage(tabs[0].id, request);\n}\n\nexport async function sendNativeMessage(request) {\n  return await browser.runtime.sendNativeMessage(\"application.id\", request);\n}\n","\"use strict\";\n\nimport { sendNativeMessage } from \"../shared/utils\";\n\nexport class Translator {\n  #id = 1e4 * Math.round(1e4 * Math.random());\n\n  #sourceLanguage;\n  #targetLanguage;\n\n  constructor() {}\n\n  setSourceLanguage(sourceLanguage) {\n    this.#sourceLanguage = sourceLanguage;\n  }\n\n  setTargetLanguage(targetLanguage) {\n    this.#targetLanguage = targetLanguage;\n  }\n\n  async translate(texts, isHtmlEnabled = true) {\n    this.#id++;\n\n    let n = 1;\n    for (const text of texts) {\n      for (let i = 0; i < text.length; i++) {\n        if (text[i] === \"i\") {\n          n++;\n        }\n      }\n    }\n\n    let timestamp = Date.now();\n    timestamp = timestamp - (timestamp % n) + n;\n\n    let body = JSON.stringify({\n      jsonrpc: \"2.0\",\n      method: \"LMT_handle_texts\",\n      params: {\n        texts: texts.map((text) => {\n          return {\n            text,\n          };\n        }),\n        html: isHtmlEnabled ? \"enabled\" : undefined,\n        splitting: isHtmlEnabled ? undefined : \"newlines\",\n        lang: {\n          target_lang: this.#targetLanguage,\n          source_lang_user_selected: this.#sourceLanguage || \"auto\",\n        },\n        timestamp,\n      },\n      id: this.#id,\n    });\n    body = body.replace(\n      `\"method\":\"`,\n      `${\n        (this.#id + 3) % 13 === 0 || (this.#id + 5) % 29 === 0\n          ? `\"method\" : \"`\n          : `\"method\": \"`\n      }`\n    );\n\n    const request = {\n      method: isHtmlEnabled ? \"translate\" : \"translateSelection\",\n      payload: {\n        headers: {\n          Accept: \"*/*\",\n          \"x-app-os-name\": \"iOS\",\n          \"Accept-Encoding\": \"gzip, deflate, br\",\n          \"Content-Type\": \"application/json\",\n          Referer: \"https://www.deepl.com/\",\n        },\n        method: \"POST\",\n        body: body,\n      },\n    };\n\n    const response = await sendNativeMessage(request);\n    if (response && response.result) {\n      return response.result;\n    } else {\n      return undefined;\n    }\n  }\n}\n","\"use strict\";\n\nimport { Translator } from \"./translator\";\nimport { sendTabMessage } from \"../shared/utils\";\n\nclass App {\n  #selectionText = undefined;\n\n  constructor() {\n    this.#init();\n  }\n\n  #init() {\n    this.#setupListeners();\n    this.#setupContextMenu();\n  }\n\n  #setupListeners() {\n    browser.runtime.onMessage.addListener((request, sender, sendResponse) => {\n      if (!request) {\n        return;\n      }\n      switch (request.method) {\n        case \"translate\": {\n          const texts = request.texts;\n          translate(texts, request.sourceLanguage, request.targetLanguage)\n            .then((result) => {\n              sendResponse({ result });\n            })\n            .catch((error) => {\n              sendResponse();\n            });\n          break;\n        }\n        case \"translateSelection\": {\n          const selectionText = this.#selectionText;\n          if (request.selectionText && request.selectionText.trim()) {\n            // From popup toolbar (Mobile only)\n            this.#translateSelection(request.selectionText);\n          } else if (selectionText && selectionText.trim()) {\n            // Language changed in popover window\n            this.#translateSelection(selectionText);\n          }\n\n          sendResponse();\n          break;\n        }\n        default: {\n          sendResponse();\n          break;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  #setupContextMenu() {\n    if (browser.menus.create) {\n      browser.menus.create({\n        id: \"translateSelection\",\n        title: browser.i18n.getMessage(\"context_menus_translate_section\"),\n        contexts: [\"editable\", \"link\", \"page\", \"selection\"],\n      });\n\n      browser.menus.onClicked.addListener(async (info, tab) => {\n        switch (info.menuItemId) {\n          case \"translateSelection\":\n            const selectionText = info.selectionText;\n            if (selectionText && selectionText.trim()) {\n              this.#translateSelection(selectionText);\n            }\n        }\n      });\n    }\n  }\n\n  async #translateSelection(selectionText) {\n    this.#selectionText = selectionText;\n    const targetLanguage = await getTargetLanguage();\n\n    sendTabMessage({\n      method: \"startTranslateSelection\",\n      selectionText,\n    });\n\n    const result = await translate(\n      [selectionText],\n      undefined,\n      targetLanguage,\n      false\n    );\n\n    await sendTabMessage({\n      method: \"finishTranslateSelection\",\n      result,\n      targetLanguage,\n    });\n    browser.runtime.sendMessage({\n      method: \"finishTranslateSelection\",\n    });\n  }\n}\n\nasync function translate(\n  texts,\n  sourceLanguage,\n  targetLanguage,\n  isHtmlEnabled = true\n) {\n  const translator = new Translator();\n  translator.setSourceLanguage(sourceLanguage);\n  translator.setTargetLanguage(targetLanguage);\n\n  const result = await translator.translate(texts, isHtmlEnabled);\n  return result;\n}\n\nasync function getTargetLanguage() {\n  const result = await browser.storage.local.get([\"selectedTargetLanguage\"]);\n\n  if (result && result.selectedTargetLanguage) {\n    return result.selectedTargetLanguage;\n  } else {\n    const locale = browser.i18n\n      .getUILanguage()\n      .split(\"-\")\n      .shift()\n      .toUpperCase();\n    return locale;\n  }\n}\n\nnew App();\n"],"names":["async","sendTabMessage","request","tabs","browser","query","active","currentWindow","sendMessage","id","Translator","constructor","Math","round","random","setSourceLanguage","sourceLanguage","this","setTargetLanguage","targetLanguage","texts","isHtmlEnabled","n","text","i","length","timestamp","Date","now","body","JSON","stringify","jsonrpc","method","params","map","html","undefined","splitting","lang","target_lang","source_lang_user_selected","replace","payload","headers","Accept","Referer","response","runtime","sendNativeMessage","result","onMessage","addListener","sender","sendResponse","translate","then","catch","error","selectionText","trim","menus","create","title","i18n","getMessage","contexts","onClicked","info","tab","menuItemId","storage","local","get","selectedTargetLanguage","getUILanguage","split","shift","toUpperCase","getTargetLanguage","translator"],"sourceRoot":""}