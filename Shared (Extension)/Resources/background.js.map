{"version":3,"file":"background.js","mappings":"mBAAa,SAAAA,EAAAC,EAAAC,EAAAC,IAAA,SAAAF,EAAAG,GAAA,GAAAA,EAAAC,IAAAJ,GAAA,UAAAK,UAAA,kEAAAC,CAAAN,EAAAC,GAAAA,EAAAM,IAAAP,EAAAE,EAAA,UAAAM,EAAAC,EAAAR,GAAA,gBAAAQ,EAAAC,GAAA,GAAAA,EAAAC,IAAA,OAAAD,EAAAC,IAAAC,KAAAH,GAAA,OAAAC,EAAAR,KAAA,CAAAW,CAAAJ,EAAAK,EAAAL,EAAAR,EAAA,iBAAAc,EAAAN,EAAAR,EAAAC,GAAA,gBAAAO,EAAAC,EAAAR,GAAA,GAAAQ,EAAAH,IAAAG,EAAAH,IAAAK,KAAAH,EAAAP,OAAA,KAAAQ,EAAAM,SAAA,UAAAX,UAAA,4CAAAK,EAAAR,MAAAA,CAAA,EAAAe,CAAAR,EAAAK,EAAAL,EAAAR,EAAA,OAAAC,GAAAA,CAAA,UAAAY,EAAAL,EAAAR,EAAAiB,GAAA,IAAAjB,EAAAG,IAAAK,GAAA,UAAAJ,UAAA,gBAAAa,EAAA,yCAAAjB,EAAAU,IAAAF,EAAA,KAAAU,EAAA,IAAAC,QAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAEN,MAAMG,EAMXC,cAAczB,EAAA,KAAAoB,EAAA,CAAAH,UAAA,EAAAd,MALR,IAAMuB,KAAKC,MAAM,IAAMD,KAAKE,YAAS5B,EAAA,KAAAsB,EAAA,CAAAL,UAAA,EAAAd,WAAA,IAAAH,EAAA,KAAAuB,EAAA,CAAAN,UAAA,EAAAd,WAAA,GAK5B,CAEf0B,kBAAkBC,GAChBd,EAAAe,KAAIT,EAAmBQ,EACzB,CAEAE,kBAAkBC,GAChBjB,EAAAe,KAAIR,EAAmBU,EACzB,CAEAC,gBAAgBC,GAA6B,IAAAC,EAAA,IAAtBC,IAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAClCtB,EAAAe,KAAIX,GAAAgB,EAAA3B,EAAJsB,KAAIX,GAAAgB,IAAAA,IAEJ,IAAIK,EAAI,EACR,IAAK,MAAMC,KAAQP,EACjB,IAAK,IAAIQ,EAAI,EAAGA,EAAID,EAAKH,OAAQI,IACf,MAAZD,EAAKC,IACPF,IAKN,IAAIG,EAAYC,KAAKC,MACrBF,EAAYA,EAAaA,EAAYH,EAAKA,EAE1C,IAAIM,EAAOC,KAAKC,UAAU,CACxBC,QAAS,MACTC,OAAQ,mBACRC,OAAQ,CACNjB,MAAOA,EAAMkB,KAAKX,IACT,CACLA,WAGJY,KAAMjB,EAAgB,eAAYG,EAClCe,UAAWlB,OAAgBG,EAAY,WACvCgB,KAAM,CACJC,YAAWhD,EAAEsB,KAAIR,GACjBmC,0BAA2BjD,EAAAsB,KAAIT,IAAoB,QAErDsB,aAEFe,GAAElD,EAAEsB,KAAIX,KAEV2B,EAAOA,EAAKa,QACT,aACA,KACEnD,EAAAsB,KAAIX,GAAO,GAAK,IAAO,IAAMX,EAAAsB,KAAIX,GAAO,GAAK,IAAO,EAChD,eACA,gBAIT,MAAMyC,EAAU,CACdV,OAAQd,EAAgB,YAAc,qBACtCyB,QAAS,CACPC,QAAS,CACPC,OAAQ,MACR,gBAAiB,MACjB,kBAAmB,oBACnB,eAAgB,mBAChBC,QAAS,0BAEXd,OAAQ,OACRJ,KAAMA,IAIV,OAAO,IAAImB,SAASC,IAClBC,QAAQC,QAAQC,kBACd,iBACAT,GACCU,IACKA,GAAYA,EAASC,OACvBL,EAAQI,EAASC,QAEjBL,OAAQ3B,EACV,GAEH,GAEL,ECzFW,SAAAiC,EAAAxE,EAAAyE,GAAAnE,EAAAN,EAAAyE,GAAAA,EAAAC,IAAA1E,EAAA,UAAAM,EAAAN,EAAAG,GAAA,GAAAA,EAAAC,IAAAJ,GAAA,UAAAK,UAAA,2EAAAU,EAAAN,EAAAR,EAAAC,GAAA,gBAAAO,EAAAC,EAAAR,GAAA,GAAAQ,EAAAH,IAAAG,EAAAH,IAAAK,KAAAH,EAAAP,OAAA,KAAAQ,EAAAM,SAAA,UAAAX,UAAA,4CAAAK,EAAAR,MAAAA,CAAA,EAAAe,CAAAR,EAAAK,EAAAL,EAAAR,EAAA,OAAAC,GAAAA,CAAA,UAAAY,EAAAL,EAAAR,EAAAiB,GAAA,IAAAjB,EAAAG,IAAAK,GAAA,UAAAJ,UAAA,gBAAAa,EAAA,yCAAAjB,EAAAU,IAAAF,EAAA,UAAAkE,EAAAlE,EAAAgE,EAAAG,GAAA,IAAAH,EAAArE,IAAAK,GAAA,UAAAJ,UAAA,yDAAAuE,CAAA,CAE6B,IAAAC,EAAA,IAAAzD,QAAA0D,EAAA,IAAAC,QAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAF,QAAAG,EAAA,IAAAH,QA+HzC,SAAAI,IArHGR,EAAA7C,KAAIkD,EAAAI,GAAAxE,KAAJkB,MACA6C,EAAA7C,KAAImD,EAAAI,GAAAzE,KAAJkB,KACF,CAAC,SAAAsD,IAGCjB,QAAQC,QAAQkB,UAAUC,aAAY,CAAC3B,EAAS4B,EAAQC,KACtD,GAAK7B,EAAL,CAGA,OAAQA,EAAQV,QACd,IAAK,YAEHwC,EADc9B,EAAQ1B,MACL0B,EAAQ/B,eAAgB+B,EAAQ5B,gBAC9C2D,MAAMpB,IACLkB,EAAa,CAAElB,UAAS,IAEzBqB,OAAOC,IACNJ,GAAc,IAElB,MAEF,IAAK,qBAAsB,CACzB,MAAMK,EAlCH,SAAArF,EAAAC,GAAA,OAAAA,EAAAC,IAAAD,EAAAC,IAAAC,KAAAH,GAAAC,EAAAR,KAAA,CAAAW,CAAAJ,EAkCmBqB,KAlCnBhB,EAAAL,EAkCuBoE,EAlCvB,QAmCCjB,EAAQkC,eAAiBlC,EAAQkC,cAAcC,OAEjDpB,EAAA7C,KAAIoD,EAAAc,GAAApF,KAAJkB,KAAyB8B,EAAQkC,eACxBA,GAAiBA,EAAcC,QAExCpB,EAAA7C,KAAIoD,EAAAc,GAAApF,KAAJkB,KAAyBgE,GAG3BL,IACA,KACF,CACA,QACEA,IA/CG,IAAAhF,EAoDP,OAAO,CAhCP,CAgCW,IAGb0D,QAAQ8B,SAASC,UAAUX,aAAaY,IACtB,wBAAZA,GACFhC,QAAQiC,QAAQC,MAAM1F,IAAI,CAAC,4BAA6B4D,UAEjBhC,IAAnCgC,EAAO+B,yBACP/B,EAAO+B,0BAEPnC,QAAQoC,KACLC,cAAc,CACbC,KAAO,sCAERd,MAAMe,IACL,GAAIA,EAAW,CACb,MAAMZ,EAAgBY,EAAUC,WAAWZ,OACvCD,GACFnB,EAAA7C,KAAIoD,EAAAc,GAAApF,KAAJkB,KAAyBgE,EAE7B,IAEN,GAEJ,GAEJ,CAAC,SAAAT,IAGKlB,QAAQyC,MAAMC,SAChB1C,QAAQyC,MAAMC,OAAO,CACnBnD,GAAI,qBACJoD,MAAO3C,QAAQ4C,KAAKC,WAAW,mCAC/BC,SAAU,CAAC,WAAY,OAAQ,OAAQ,eAGzC9C,QAAQyC,MAAMM,UAAU3B,aAAYtD,MAAOkF,EAAMC,KAC/C,GACO,uBADCD,EAAKE,WACX,CACE,MAAMvB,EAAgBqB,EAAKrB,cACvBA,GAAiBA,EAAcC,QACjCpB,EAAA7C,KAAIoD,EAAAc,GAAApF,KAAJkB,KAAyBgE,EAC3B,CAAC,IAIX,CAAC,eAAAE,EAEyBF,GACxB/E,EAAAe,KAAI+C,EAAkBiB,GACtB,MAAM9D,QA2CVC,iBACE,OAAO,IAAIgC,SAAQ,CAACC,EAASoD,KAC3BnD,QAAQiC,QAAQC,MAAM1F,IAAI,CAAC,2BAA4B4D,IACrD,GAAIA,GAAUA,EAAOgD,uBACnBrD,EAAQK,EAAOgD,4BACV,CACL,MAAMC,EAASrD,QAAQ4C,KACpBU,gBACAC,MAAM,KACNC,QACAC,cACH1D,EAAQsD,EACV,IACA,GAEN,CA1DiCK,GAE7B1D,QAAQoC,KAAKuB,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IAASzB,IACzDpC,QAAQoC,KAAK0B,YAAY1B,EAAK,GAAG7C,GAAI,CACnCR,OAAQ,0BACR4C,iBACA,IAGJ,MAAMvB,QAAemB,EACnB,CAACI,QACDvD,EACAP,GACA,GAGFmC,QAAQoC,KAAKuB,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IAASzB,IACzDpC,QAAQoC,KAAK0B,YAAY1B,EAAK,GAAG7C,GAAI,CACnCR,OAAQ,2BACRqB,SACAvC,kBACA,IAEJmC,QAAQC,QAAQ6D,YAAY,CAC1B/E,OAAQ,4BAEZ,CAGFjB,eAAeyD,EACbxD,EACAL,EACAG,GAEA,IADAI,IAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAEb,MAAM6F,EAAa,IAAI3G,EACvB2G,EAAWtG,kBAAkBC,GAC7BqG,EAAWnG,kBAAkBC,GAG7B,aADqBkG,EAAWxC,UAAUxD,EAAOE,EAEnD,CAmBA,IA9JA,MAGEZ,cAPW,IAAAxB,EAAAC,EAAAC,EAOGsE,EAAA,KAAAU,GAAAV,EAAA,KAAAS,GAAAT,EAAA,KAAAQ,GAAAR,EAAA,KAAAM,GAPH5E,EAOG,CAAAc,UAAA,EAAAd,WAFGqC,GALNjC,EAAAN,EAOG,KAPHC,EAOG4E,GAPH5E,EAAAM,IAAAP,EAAAE,GAQTyE,EAAA7C,KAAIgD,EAAAK,GAAAvE,KAAJkB,KACF,E","sources":["webpack://webtranslator/./src/background/translator.js","webpack://webtranslator/./src/background/background.js"],"sourcesContent":["\"use strict\";\n\nexport class Translator {\n  #id = 1e4 * Math.round(1e4 * Math.random());\n\n  #sourceLanguage;\n  #targetLanguage;\n\n  constructor() {}\n\n  setSourceLanguage(sourceLanguage) {\n    this.#sourceLanguage = sourceLanguage;\n  }\n\n  setTargetLanguage(targetLanguage) {\n    this.#targetLanguage = targetLanguage;\n  }\n\n  async translate(texts, isHtmlEnabled = true) {\n    this.#id++;\n\n    let n = 1;\n    for (const text of texts) {\n      for (let i = 0; i < text.length; i++) {\n        if (text[i] === \"i\") {\n          n++;\n        }\n      }\n    }\n\n    let timestamp = Date.now();\n    timestamp = timestamp - (timestamp % n) + n;\n\n    let body = JSON.stringify({\n      jsonrpc: \"2.0\",\n      method: \"LMT_handle_texts\",\n      params: {\n        texts: texts.map((text) => {\n          return {\n            text,\n          };\n        }),\n        html: isHtmlEnabled ? \"enabled\" : undefined,\n        splitting: isHtmlEnabled ? undefined : \"newlines\",\n        lang: {\n          target_lang: this.#targetLanguage,\n          source_lang_user_selected: this.#sourceLanguage || \"auto\",\n        },\n        timestamp,\n      },\n      id: this.#id,\n    });\n    body = body.replace(\n      `\"method\":\"`,\n      `${\n        (this.#id + 3) % 13 === 0 || (this.#id + 5) % 29 === 0\n          ? `\"method\" : \"`\n          : `\"method\": \"`\n      }`\n    );\n\n    const request = {\n      method: isHtmlEnabled ? \"translate\" : \"translateSelection\",\n      payload: {\n        headers: {\n          Accept: \"*/*\",\n          \"x-app-os-name\": \"iOS\",\n          \"Accept-Encoding\": \"gzip, deflate, br\",\n          \"Content-Type\": \"application/json\",\n          Referer: \"https://www.deepl.com/\",\n        },\n        method: \"POST\",\n        body: body,\n      },\n    };\n\n    return new Promise((resolve) => {\n      browser.runtime.sendNativeMessage(\n        \"application.id\",\n        request,\n        (response) => {\n          if (response && response.result) {\n            resolve(response.result);\n          } else {\n            resolve(undefined);\n          }\n        }\n      );\n    });\n  }\n}\n","\"use strict\";\n\nimport { Translator } from \"./translator\";\n\nclass App {\n  #selectionText = undefined;\n\n  constructor() {\n    this.#init();\n  }\n\n  #init() {\n    this.#setupListeners();\n    this.#setupContextMenu();\n  }\n\n  #setupListeners() {\n    browser.runtime.onMessage.addListener((request, sender, sendResponse) => {\n      if (!request) {\n        return;\n      }\n      switch (request.method) {\n        case \"translate\": {\n          const texts = request.texts;\n          translate(texts, request.sourceLanguage, request.targetLanguage)\n            .then((result) => {\n              sendResponse({ result });\n            })\n            .catch((error) => {\n              sendResponse();\n            });\n          break;\n        }\n        case \"translateSelection\": {\n          const selectionText = this.#selectionText;\n          if (request.selectionText && request.selectionText.trim()) {\n            // From popup toolbar (Mobile only)\n            this.#translateSelection(request.selectionText);\n          } else if (selectionText && selectionText.trim()) {\n            // Language changed in popover window\n            this.#translateSelection(selectionText);\n          }\n\n          sendResponse();\n          break;\n        }\n        default: {\n          sendResponse();\n          break;\n        }\n      }\n\n      return true;\n    });\n\n    browser.commands.onCommand.addListener((command) => {\n      if (command === \"trigger-translation\") {\n        browser.storage.local.get([\"settingsReadingShortcut\"], (result) => {\n          const settingsReadingShortcut =\n            result.settingsReadingShortcut === undefined ||\n            result.settingsReadingShortcut;\n          if (settingsReadingShortcut) {\n            browser.tabs\n              .executeScript({\n                code: `window.getSelection().toString();`,\n              })\n              .then((selection) => {\n                if (selection) {\n                  const selectionText = selection.toString().trim();\n                  if (selectionText) {\n                    this.#translateSelection(selectionText);\n                  }\n                }\n              });\n          }\n        });\n      }\n    });\n  }\n\n  #setupContextMenu() {\n    if (browser.menus.create) {\n      browser.menus.create({\n        id: \"translateSelection\",\n        title: browser.i18n.getMessage(\"context_menus_translate_section\"),\n        contexts: [\"editable\", \"link\", \"page\", \"selection\"],\n      });\n\n      browser.menus.onClicked.addListener(async (info, tab) => {\n        switch (info.menuItemId) {\n          case \"translateSelection\":\n            const selectionText = info.selectionText;\n            if (selectionText && selectionText.trim()) {\n              this.#translateSelection(selectionText);\n            }\n        }\n      });\n    }\n  }\n\n  async #translateSelection(selectionText) {\n    this.#selectionText = selectionText;\n    const targetLanguage = await getTargetLanguage();\n\n    browser.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      browser.tabs.sendMessage(tabs[0].id, {\n        method: \"startTranslateSelection\",\n        selectionText,\n      });\n    });\n\n    const result = await translate(\n      [selectionText],\n      undefined,\n      targetLanguage,\n      false\n    );\n\n    browser.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      browser.tabs.sendMessage(tabs[0].id, {\n        method: \"finishTranslateSelection\",\n        result,\n        targetLanguage,\n      });\n    });\n    browser.runtime.sendMessage({\n      method: \"finishTranslateSelection\",\n    });\n  }\n}\n\nasync function translate(\n  texts,\n  sourceLanguage,\n  targetLanguage,\n  isHtmlEnabled = true\n) {\n  const translator = new Translator();\n  translator.setSourceLanguage(sourceLanguage);\n  translator.setTargetLanguage(targetLanguage);\n\n  const result = await translator.translate(texts, isHtmlEnabled);\n  return result;\n}\n\nasync function getTargetLanguage() {\n  return new Promise((resolve, reject) => {\n    browser.storage.local.get([\"selectedTargetLanguage\"], (result) => {\n      if (result && result.selectedTargetLanguage) {\n        resolve(result.selectedTargetLanguage);\n      } else {\n        const locale = browser.i18n\n          .getUILanguage()\n          .split(\"-\")\n          .shift()\n          .toUpperCase();\n        resolve(locale);\n      }\n    });\n  });\n}\n\nnew App();\n"],"names":["_classPrivateFieldInitSpec","obj","privateMap","value","privateCollection","has","TypeError","_checkPrivateRedeclaration","set","_classPrivateFieldGet","receiver","descriptor","get","call","_classApplyDescriptorGet","_classExtractFieldDescriptor","_classPrivateFieldSet","writable","_classApplyDescriptorSet","action","_id","WeakMap","_sourceLanguage","_targetLanguage","Translator","constructor","Math","round","random","setSourceLanguage","sourceLanguage","this","setTargetLanguage","targetLanguage","async","texts","_this$id","isHtmlEnabled","arguments","length","undefined","n","text","i","timestamp","Date","now","body","JSON","stringify","jsonrpc","method","params","map","html","splitting","lang","target_lang","source_lang_user_selected","id","replace","request","payload","headers","Accept","Referer","Promise","resolve","browser","runtime","sendNativeMessage","response","result","_classPrivateMethodInitSpec","privateSet","add","_classPrivateMethodGet","fn","_selectionText","_init","WeakSet","_setupListeners","_setupContextMenu","_translateSelection","_init2","_setupListeners2","_setupContextMenu2","onMessage","addListener","sender","sendResponse","translate","then","catch","error","selectionText","trim","_translateSelection2","commands","onCommand","command","storage","local","settingsReadingShortcut","tabs","executeScript","code","selection","toString","menus","create","title","i18n","getMessage","contexts","onClicked","info","tab","menuItemId","reject","selectedTargetLanguage","locale","getUILanguage","split","shift","toUpperCase","getTargetLanguage","query","active","currentWindow","sendMessage","translator"],"sourceRoot":""}