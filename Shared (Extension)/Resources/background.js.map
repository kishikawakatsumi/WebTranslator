{"version":3,"file":"background.js","mappings":"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","sources":["webpack://webtranslator/./src/background/translator.js","webpack://webtranslator/./src/background/background.js"],"sourcesContent":["\"use strict\";\n\nexport class Translator {\n  _id = 1e4 * Math.round(1e4 * Math.random());\n\n  _sourceLanguage;\n  _targetLanguage;\n\n  constructor() {}\n\n  setSourceLanguage(sourceLanguage) {\n    this._sourceLanguage = sourceLanguage;\n  }\n\n  setTargetLanguage(targetLanguage) {\n    this._targetLanguage = targetLanguage;\n  }\n\n  async translate(texts, isHtmlEnabled = true) {\n    this._id++;\n\n    let n = 1;\n    for (const text of texts) {\n      for (let i = 0; i < text.length; i++) {\n        if (text[i] === \"i\") {\n          n++;\n        }\n      }\n    }\n\n    let timestamp = Date.now();\n    timestamp = timestamp - (timestamp % n) + n;\n\n    let body = JSON.stringify({\n      jsonrpc: \"2.0\",\n      method: \"LMT_handle_texts\",\n      params: {\n        texts: texts.map((text) => {\n          return {\n            text,\n          };\n        }),\n        html: isHtmlEnabled ? \"enabled\" : undefined,\n        splitting: isHtmlEnabled ? undefined : \"newlines\",\n        lang: {\n          target_lang: this._targetLanguage,\n          source_lang_user_selected: this._sourceLanguage || \"auto\",\n        },\n        timestamp,\n      },\n      id: this._id,\n    });\n    body = body.replace(\n      `\"method\":\"`,\n      `${\n        (this._id + 3) % 13 === 0 || (this._id + 5) % 29 === 0\n          ? `\"method\" : \"`\n          : `\"method\": \"`\n      }`\n    );\n\n    const request = {\n      method: isHtmlEnabled ? \"translate\" : \"translateSelection\",\n      payload: {\n        headers: {\n          Accept: \"*/*\",\n          \"x-app-os-name\": \"iOS\",\n          \"Accept-Encoding\": \"gzip, deflate, br\",\n          \"Content-Type\": \"application/json\",\n          Referer: \"https://www.deepl.com/\",\n        },\n        method: \"POST\",\n        body: body,\n      },\n    };\n\n    return new Promise((resolve) => {\n      browser.runtime.sendNativeMessage(\n        \"application.id\",\n        request,\n        (response) => {\n          if (response && response.result) {\n            resolve(response.result);\n          } else {\n            resolve(undefined);\n          }\n        }\n      );\n    });\n  }\n}\n","\"use strict\";\n\nimport { Translator } from \"./translator\";\n\nclass App {\n  _selectionText = undefined;\n\n  constructor() {\n    this._init();\n  }\n\n  _init() {\n    this._setupListeners();\n    this._setupContextMenu();\n  }\n\n  _setupListeners() {\n    browser.runtime.onMessage.addListener((request, sender, sendResponse) => {\n      if (!request) {\n        return;\n      }\n      switch (request.method) {\n        case \"translate\": {\n          const texts = request.texts;\n          translate(texts, request.sourceLanguage, request.targetLanguage)\n            .then((result) => {\n              sendResponse({ result });\n            })\n            .catch((error) => {\n              sendResponse();\n            });\n          break;\n        }\n        case \"translateSelection\": {\n          const selectionText = this._selectionText;\n          if (request.selectionText && request.selectionText.trim()) {\n            // From popup toolbar (Mobile only)\n            this._translateSelection(request.selectionText);\n          } else if (selectionText && selectionText.trim()) {\n            // Language changed in popover window\n            this._translateSelection(selectionText);\n          }\n\n          sendResponse();\n          break;\n        }\n        default: {\n          sendResponse();\n          break;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  _setupContextMenu() {\n    if (browser.menus.create) {\n      browser.menus.create({\n        id: \"translateSelection\",\n        title: browser.i18n.getMessage(\"context_menus_translate_section\"),\n        contexts: [\"editable\", \"link\", \"page\", \"selection\"],\n      });\n\n      browser.menus.onClicked.addListener(async (info, tab) => {\n        switch (info.menuItemId) {\n          case \"translateSelection\":\n            const selectionText = info.selectionText;\n            if (selectionText && selectionText.trim()) {\n              this._translateSelection(selectionText);\n            }\n        }\n      });\n    }\n  }\n\n  async _translateSelection(selectionText) {\n    this._selectionText = selectionText;\n    const targetLanguage = await getTargetLanguage();\n\n    browser.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      browser.tabs.sendMessage(tabs[0].id, {\n        method: \"startTranslateSelection\",\n        selectionText,\n      });\n    });\n\n    const result = await translate(\n      [selectionText],\n      undefined,\n      targetLanguage,\n      false\n    );\n\n    browser.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      browser.tabs.sendMessage(tabs[0].id, {\n        method: \"finishTranslateSelection\",\n        result,\n        targetLanguage,\n      });\n    });\n    browser.runtime.sendMessage({\n      method: \"finishTranslateSelection\",\n    });\n  }\n}\n\nasync function translate(\n  texts,\n  sourceLanguage,\n  targetLanguage,\n  isHtmlEnabled = true\n) {\n  const translator = new Translator();\n  translator.setSourceLanguage(sourceLanguage);\n  translator.setTargetLanguage(targetLanguage);\n\n  const result = await translator.translate(texts, isHtmlEnabled);\n  return result;\n}\n\nasync function getTargetLanguage() {\n  return new Promise((resolve, reject) => {\n    browser.storage.local.get([\"selectedTargetLanguage\"], (result) => {\n      if (result && result.selectedTargetLanguage) {\n        resolve(result.selectedTargetLanguage);\n      } else {\n        const locale = browser.i18n\n          .getUILanguage()\n          .split(\"-\")\n          .shift()\n          .toUpperCase();\n        resolve(locale);\n      }\n    });\n  });\n}\n\nnew App();\n"],"names":["Translator","_id","Math","round","random","_sourceLanguage","_targetLanguage","constructor","setSourceLanguage","sourceLanguage","this","setTargetLanguage","targetLanguage","async","texts","isHtmlEnabled","n","text","i","length","timestamp","Date","now","body","JSON","stringify","jsonrpc","method","params","map","html","undefined","splitting","lang","target_lang","source_lang_user_selected","id","replace","request","payload","headers","Accept","Referer","Promise","resolve","browser","runtime","sendNativeMessage","response","result","translate","translator","_selectionText","_init","_setupListeners","_setupContextMenu","onMessage","addListener","sender","sendResponse","then","catch","error","selectionText","trim","_translateSelection","menus","create","title","i18n","getMessage","contexts","onClicked","info","tab","menuItemId","reject","storage","local","get","selectedTargetLanguage","locale","getUILanguage","split","shift","toUpperCase","getTargetLanguage","tabs","query","active","currentWindow","sendMessage"],"sourceRoot":""}